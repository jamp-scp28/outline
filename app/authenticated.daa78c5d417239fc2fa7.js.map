{"version":3,"sources":["webpack:///./app/components/Authenticated.tsx","webpack:///./app/components/LoadingIndicator/LoadingIndicator.ts","webpack:///./app/components/LoadingIndicator/LoadingIndicatorBar.tsx","webpack:///./app/components/LoadingIndicator/index.ts","webpack:///./app/utils/language.ts"],"names":["observer","Authenticated","children","auth","useStores","i18n","useTranslation","language","user","React","changeLanguage","authenticated","team","hostname","window","location","domain","href","url","pathname","env","SUBDOMAINS_ENABLED","subdomain","isCustomSubdomain","startsWith","logout","to","LoadingIndicator","ui","enableProgressBar","disableProgressBar","loadingFrame","keyframes","Container","styled","div","depths","loadingIndicatorBar","Loader","props","theme","primary","LoadingIndicatorBar","detectLanguage","navigator","split","ln","region","toUpperCase","toLanguageString","replace"],"mappings":"sPAyDeA,uBA3CO,SAAhBC,cAAiB,GAAwB,MAAtBC,EAAsB,EAAtBA,SACfC,EAASC,cAATD,KACAE,EAASC,cAATD,KACFE,EAAQ,UAAGJ,EAAKK,YAAR,aAAG,EAAWD,SAQ5B,GAJAE,aAAgB,WACdC,YAAeH,EAAUF,KACxB,CAACA,EAAME,IAENJ,EAAKQ,cAAe,CACtB,IAAQH,EAAeL,EAAfK,KAAMI,EAAST,EAATS,KACNC,EAAaC,OAAOC,SAApBF,SAER,IAAKD,IAASJ,EACZ,OAAO,gBAAC,IAAD,MAKT,GAAII,EAAKI,QACP,GAAIJ,EAAKI,SAAWH,EAElB,OADAC,OAAOC,SAASE,KAAhB,UAA0BL,EAAKM,KAA/B,OAAqCJ,OAAOC,SAASI,UAC9C,gBAAC,IAAD,WAEJ,GACLC,IAAIC,oBACJT,EAAKU,WACLC,YAAkBV,KACjBA,EAASW,WAAT,UAAuBZ,EAAKU,UAA5B,MAGD,OADAR,OAAOC,SAASE,KAAhB,UAA0BL,EAAKM,KAA/B,OAAqCJ,OAAOC,SAASI,UAC9C,gBAAC,IAAD,MAGT,OAAOjB,EAIT,OADAC,EAAKsB,QAAO,GACL,gBAAC,IAAD,CAAUC,GAAG,U,4GCvCP1B,mBAXf,SAAS2B,mBACP,IAAQC,EAAOxB,cAAPwB,GAOR,OALAnB,aAAgB,WAEd,OADAmB,EAAGC,oBACI,kBAAMD,EAAGE,wBACf,CAACF,IAEG,Q,wBCAHG,EAAeC,oBAAH,mDAKZC,EAAYC,UAAOC,IAAV,qFAAGD,CAAH,+HAGFE,IAAOC,oBAELN,GAKTO,EAASJ,UAAOC,IAAV,kFAAGD,CAAH,iDAGU,SAACK,GAAD,OAAWA,EAAMC,MAAMC,WAG9BC,EA7Ba,SAAtBA,sBACJ,OACE,gBAACT,EAAD,KACE,gBAACK,EAAD,QCJSX,O,42CCDR,SAASgB,iBACd,qBAAgBC,UAAUrC,SAASsC,MAAM,KAAzC,GAAOC,EAAP,KACMC,GADN,MACqBD,GAAIE,cACzB,gBAAUF,EAAV,YAAgBC,GAGX,SAASrC,eACduC,EACA5C,GAEI4C,GAAoB5C,EAAKE,WAAa0C,GAGxC5C,EAAKK,eAAeuC,EAAiBC,QAAQ,IAAK","file":"authenticated.daa78c5d417239fc2fa7.js","sourcesContent":["import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router-dom\";\nimport { isCustomSubdomain } from \"@shared/utils/domains\";\nimport LoadingIndicator from \"~/components/LoadingIndicator\";\nimport env from \"~/env\";\nimport useStores from \"~/hooks/useStores\";\nimport { changeLanguage } from \"~/utils/language\";\n\ntype Props = {\n  children: JSX.Element;\n};\n\nconst Authenticated = ({ children }: Props) => {\n  const { auth } = useStores();\n  const { i18n } = useTranslation();\n  const language = auth.user?.language;\n\n  // Watching for language changes here as this is the earliest point we have\n  // the user available and means we can start loading translations faster\n  React.useEffect(() => {\n    changeLanguage(language, i18n);\n  }, [i18n, language]);\n\n  if (auth.authenticated) {\n    const { user, team } = auth;\n    const { hostname } = window.location;\n\n    if (!team || !user) {\n      return <LoadingIndicator />;\n    }\n\n    // If we're authenticated but viewing a domain that doesn't match the\n    // current team then kick the user to the teams correct domain.\n    if (team.domain) {\n      if (team.domain !== hostname) {\n        window.location.href = `${team.url}${window.location.pathname}`;\n        return <LoadingIndicator />;\n      }\n    } else if (\n      env.SUBDOMAINS_ENABLED &&\n      team.subdomain &&\n      isCustomSubdomain(hostname) &&\n      !hostname.startsWith(`${team.subdomain}.`)\n    ) {\n      window.location.href = `${team.url}${window.location.pathname}`;\n      return <LoadingIndicator />;\n    }\n\n    return children;\n  }\n\n  auth.logout(true);\n  return <Redirect to=\"/\" />;\n};\n\nexport default observer(Authenticated);\n","import { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport useStores from \"~/hooks/useStores\";\n\nfunction LoadingIndicator() {\n  const { ui } = useStores();\n\n  React.useEffect(() => {\n    ui.enableProgressBar();\n    return () => ui.disableProgressBar();\n  }, [ui]);\n\n  return null;\n}\n\nexport default observer(LoadingIndicator);\n","import * as React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { depths } from \"@shared/styles\";\n\nconst LoadingIndicatorBar = () => {\n  return (\n    <Container>\n      <Loader />\n    </Container>\n  );\n};\n\nconst loadingFrame = keyframes`\n  from { margin-left: -100%; }\n  to { margin-left: 100%; }\n`;\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  z-index: ${depths.loadingIndicatorBar};\n  width: 100%;\n  animation: ${loadingFrame} 4s ease-in-out infinite;\n  animation-delay: 250ms;\n  margin-left: -100%;\n`;\n\nconst Loader = styled.div`\n  width: 100%;\n  height: 2px;\n  background-color: ${(props) => props.theme.primary};\n`;\n\nexport default LoadingIndicatorBar;\n","import LoadingIndicator from \"./LoadingIndicator\";\nimport LoadingIndicatorBar from \"./LoadingIndicatorBar\";\n\nexport default LoadingIndicator;\n\nexport { LoadingIndicatorBar };\n","import { i18n } from \"i18next\";\n\nexport function detectLanguage() {\n  const [ln, r] = navigator.language.split(\"-\");\n  const region = (r || ln).toUpperCase();\n  return `${ln}_${region}`;\n}\n\nexport function changeLanguage(\n  toLanguageString: string | null | undefined,\n  i18n: i18n\n) {\n  if (toLanguageString && i18n.language !== toLanguageString) {\n    // Languages are stored in en_US format in the database, however the\n    // frontend translation framework (i18next) expects en-US\n    i18n.changeLanguage(toLanguageString.replace(\"_\", \"-\"));\n  }\n}\n"],"sourceRoot":""}